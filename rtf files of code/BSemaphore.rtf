{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\
 * Defines a binary semaphore with operations P (wait) and V (signal).\
 * \
 * @author andrianoff\
 * @version 5 April 2018\
 */\
public class BSemaphore\
\{\
	private volatile int value;\
	\
	/**\
	 * Creates a semaphore with an initial value.\
	 * @param init initial value\
	 */\
	public BSemaphore (int init)\
	\{\
		value = init;\
	\}\
	\
	/**\
	 * Performs a wait on the semaphore.\
	 * (Waits if value is 0.)\
	 */\
	public synchronized void P()\
	\{\
		while(value == 0)\
		\{\
			try\
			\{\
				wait();\
			\}\
			catch (InterruptedException e)\
			\{\}\
		\}\
		value = 0;\
	\}\
	\
	/**\
	 * Performs a signal on the semaphore.\
	 * Notifies any thread waiting on semaphore.\
	 */\
	public synchronized void V()\
	\{\
		value = 1;\
		notifyAll();\
	\}\
\
\}\
}